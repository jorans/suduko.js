{"version":3,"sources":["suduko/Suduko.js","App.js","serviceWorker.js","index.js"],"names":["deepCopy","gameBoard","JSON","parse","stringify","lockGameboard","gameboard","fn","gb","i","length","j","values","mapEachSquare","square","locked","value","validateInput","evt","theEvent","window","event","keyCode","which","key","String","fromCharCode","test","returnValue","preventDefault","getAllNeighborsWithNumber","neigborsMap","number","hasSameNumber","getKey","forEach","neighbors","neighborWithSameNumber","getNeighborsWithSameNumber","removeSquare","a","tmp","b","x","y","push","getUniqueSquares","validMove","isEmptyArray","neighbor","getNumberOnGameboard","failingSquareOnGameBoard","failing","clearFailingSquareOnGameBoard","placeNumberOnGameBoard","uniqueSquares","result","uniqueSquare","isSameSquare","buildSquare","id","s1","s2","array","Suduko","useMemo","indicies","neighborsMap","undefined","getNeighborsMap","size","numberOfRows","numberOfCols","allInidicies","row","rowIndicies","col","quadrantSize","quadrantRows","quadrantCols","rowsInQuadrant","colsInQuadrant","quadrantRow","quadrantCol","quadrantIndicies","getIndicies","useState","height","width","getInitialGameBoard","setGameBoard","savedGameboards","setSavedGameboards","handleInput","input","nextGameBoard","prevNumber","boardUI","map","cols","tdClassnames","props","Object","keys","classNames","className","disabled","type","onPaste","onKeyDown","defaultValue","maxLength","onClick","nextSavedGameboards","nextGameboard","pop","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.926d5fd5.chunk.js","sourcesContent":["import React, {useMemo, useState} from 'react';\n\nfunction classNames(props) {\n    var result = '';\n    Object.keys(props).forEach((key) => {\n        if(props[key]){\n            result += key;\n            result += ' ';\n        }\n    })\n    return result;\n}\n\nfunction deepCopy(gameBoard) {\n    return JSON.parse(JSON.stringify(gameBoard));\n}\n\nfunction lockGameboard(gameboard) {\n    return mapEachSquare(gameboard, (square) => {\n        square.locked = square.value > 0;\n        return square;\n    });\n}\n\nfunction Suduko() {\n    const size = 3;\n    const neigborsMap = useMemo(() => getNeighborsMap(getIndicies(size)), [size]);\n    const [gameBoard, setGameBoard] = useState(() => getInitialGameBoard(size));\n    const [savedGameboards, setSavedGameboards] = useState([]);\n\n    const handleInput = (square) => (evt) => {\n        let input = validateInput(evt);\n        if (input) {\n            let number = input !== \"*\" ? input : 0;\n            let nextGameBoard = deepCopy(gameBoard);\n            if (number === 0) {\n                // This square has been reset, clear any failure flags\n                nextGameBoard = clearFailingSquareOnGameBoard(nextGameBoard, square)\n                // Re-evaluate neighbors that have same number (in case a faulty state has been resolved)\n                let prevNumber = getNumberOnGameboard(gameBoard, square);\n                let gb = placeNumberOnGameBoard(number, nextGameBoard, square);\n                let neighborsWithNumber = getAllNeighborsWithNumber(neigborsMap, square, prevNumber, gb)\n                neighborsWithNumber.forEach((neighbor) => {\n                    if (validMove(gb, neighbor, prevNumber, neigborsMap)) {\n                        nextGameBoard = clearFailingSquareOnGameBoard(nextGameBoard, neighbor)\n                    } else {\n                        nextGameBoard = failingSquareOnGameBoard(nextGameBoard, neighbor)\n                    }\n                })\n            } else if (validMove(gameBoard, square, number, neigborsMap)) {\n                nextGameBoard = clearFailingSquareOnGameBoard(nextGameBoard, square)\n            } else {\n                nextGameBoard = failingSquareOnGameBoard(nextGameBoard, square)\n            }\n            setGameBoard(placeNumberOnGameBoard(number, nextGameBoard, square));\n        }\n    }\n    const saveGameboard = () => {\n        let nextSavedGameboards = deepCopy(savedGameboards);\n        nextSavedGameboards.push(deepCopy(gameBoard));\n        setSavedGameboards(nextSavedGameboards);\n        let nextGameboard = deepCopy(gameBoard);\n        setGameBoard(lockGameboard(nextGameboard));\n\n    };\n    const restoreGameboard = () => {\n        let nextSavedGameboards = deepCopy(savedGameboards);\n        setGameBoard(nextSavedGameboards.pop());\n        setSavedGameboards(nextSavedGameboards);\n    };\n    let boardUI = gameBoard.map(row => {\n        let cols = row.values.map(square => {\n            let tdClassnames = classNames({\n                \"verticalBorder\": square.x === 2 || square.x === 5,\n                \"horizontalBorder\" : square.y === 2 || square.y === 5,\n                \"failed\" : square.failing,\n                \"locked\" : square.locked\n            });\n            return (\n                <td key={square.id} className={tdClassnames}>\n                    <input disabled={square.locked} key={square.id} type={\"text\"} onPaste={handleInput(square)} onKeyDown={handleInput(square)} defaultValue={square.value === 0 ? '' : square.value} size={1} maxLength={1}/>\n                </td>\n            )\n        });\n        return (\n            <tr key={row.id}>\n                {cols}\n            </tr>\n        )\n    })\n    return (\n        <>\n            <h1>Welcome to Suduko</h1>\n            <table className={\"App gameBoard\"}>\n                <tbody>{boardUI}</tbody>\n            </table>\n            <button onClick={saveGameboard}>Save</button>\n            <button onClick={restoreGameboard} disabled={isEmptyArray(savedGameboards)}>Restore ({savedGameboards.length})</button>\n        </>\n    );\n}\nconst validateInput = (evt) => {\n    var theEvent = evt || window.event;\n    var keyCode = theEvent.keyCode || theEvent.which;\n    let key = String.fromCharCode(keyCode);\n\n    var regex = /[1-9]/;\n    if (!regex.test(key)) {\n        theEvent.returnValue = false;\n        if (/[ -~]/.test(key) && theEvent.preventDefault) {\n            theEvent.preventDefault();\n        }\n        if (keyCode === 8 || keyCode === 32) {\n            return \"*\";\n        }\n        return;\n    } else {\n        return key;\n    }\n}\n\n\n\nfunction getAllNeighborsWithNumber(neigborsMap, square, number, gameBoard) {\n    let hasSameNumber = [];\n    neigborsMap[getKey(square)].forEach((neighbors) => {\n        let neighborWithSameNumber = getNeighborsWithSameNumber(number, gameBoard, neighbors);\n        hasSameNumber = [...hasSameNumber, ...neighborWithSameNumber];\n    });\n    return removeSquare(getUniqueSquares(hasSameNumber), square);\n}\n\nconst validMove = (gameBoard, square, number, neigborsMap) => {\n    return isEmptyArray(getAllNeighborsWithNumber(neigborsMap, square, number, gameBoard));\n}\nconst getNeighborsWithSameNumber = (number, gameboard, neighbors) => {\n    let hasSameNumber = [];\n    neighbors.forEach((neighbor) => {\n        if (number === getNumberOnGameboard(gameboard, neighbor)) {\n            hasSameNumber.push(neighbor);\n        }\n    });\n    return hasSameNumber;\n}\nfunction getUniqueSquares(a) {\n    if(a.length === 0){\n        return [];\n    }\n    var b = [a[0]], i, j, tmp;\n    for (i = 1; i < a.length; i++) {\n        tmp = 1;\n        for (j = 0; j < b.length; j++) {\n            if (a[i].x === b[j].x && a[i].y === b[j].y) {\n                tmp = 0;\n                break;\n            }\n        }\n        if (tmp) {\n            b.push(a[i]);\n        }\n    }\n    return b;\n}\n\nfunction mapEachSquare(gameboard, fn){\n    let gb = deepCopy(gameboard);\n    for (let i = 0; i < gb.length; i++) {\n        for (let j = 0; j < gb[i].values.length; j++) {\n            gb[i].values[j] = fn(gb[i].values[j]);\n        }\n    }\n    return gb;\n}\nfunction failingSquareOnGameBoard(gameBoard, square) {\n    gameBoard[square.y].values[square.x].failing = true;\n    return gameBoard;\n}\nfunction clearFailingSquareOnGameBoard(gameBoard, square) {\n    gameBoard[square.y].values[square.x].failing = false;\n    return gameBoard;\n}\nfunction placeNumberOnGameBoard(number, gameBoard, square) {\n    gameBoard[square.y].values[square.x].value = number;\n    return gameBoard;\n}\nfunction getNumberOnGameboard(gameBoard, square) {\n    return gameBoard[square.y].values[square.x].value;\n}\n\nfunction getInitialGameBoard(size) {\n    let height = size*size;\n    let width = size*size;\n    var result = [];\n    for (var i = 0 ; i < height; i++) {\n        result[i] = {id:i, values:[]};\n        for (var j = 0; j < width; j++) {\n            result[i].values[j] = buildSquare(i, j, 0);\n        }\n    }\n    return result;\n}\nfunction getIndicies(size){\n    let numberOfRows = size*size;\n    let numberOfCols = size*size;\n    let allInidicies = [];\n\n    // Add all rows\n    for(let row = 0; row < numberOfRows; row++){\n        let rowIndicies = [];\n        for(let col = 0; col < numberOfCols; col++){\n            rowIndicies.push({\"x\": col, \"y\":row})\n        }\n        allInidicies.push(rowIndicies);\n    }\n    // Add all columns\n    for(let col = 0; col < numberOfCols ; col++){\n        let rowIndicies = [];\n        for(let row = 0; row < numberOfRows; row++){\n            rowIndicies.push({\"x\": col, \"y\":row})\n        }\n        allInidicies.push(rowIndicies);\n    }\n\n    /*\n     *  0  1  |  4  5\n     *  2  3  |  6  7\n     * -------+-------\n     *  8  9  | 12 13\n     * 10 11  | 14 15\n     *\n     *  0 -> 0:0 1 -> 0:1   2 -> 1:0   3 -> 1:1\n     *  4 -> 0:2 5 -> 0:3   6 -> 1:2   7 -> 1:3\n     *  8 -> 2:0 9 -> 2:1  10 -> 3:0  11 -> 3:1\n     * 12 -> 2:2 13 -> 2:3 14 -> 3:2  15 -> 3:3\n     *\n     */\n    const quadrantSize = size;\n    const numOfQuadrants = size;\n    let quadrantRows = numOfQuadrants;\n    let quadrantCols = numOfQuadrants;\n    let rowsInQuadrant = quadrantSize;\n    let colsInQuadrant = quadrantSize;\n\n    for (let quadrantRow = 0; quadrantRow < quadrantRows; quadrantRow++) {\n        for (let quadrantCol = 0; quadrantCol < quadrantCols; quadrantCol++) {\n            let quadrantIndicies = [];\n            for (let row = 0; row < rowsInQuadrant; row++) {\n                for (let col = 0; col < colsInQuadrant; col++) {\n                    let x = (quadrantCol*quadrantSize) + col;\n                    let y = (quadrantRow*quadrantSize) + row;\n                    quadrantIndicies.push({\"x\":x, \"y\":y});\n                }\n            }\n            allInidicies.push(quadrantIndicies);\n        }\n    }\n\n    return allInidicies;\n}\n\nfunction getNeighborsMap(indicies){\n    let neighborsMap = {};\n    for(let i = 0; i < indicies.length; i++){\n        for(let j = 0; j < indicies[i].length; j++){\n            let neighbor = indicies[i][j];\n            let key = neighbor.x + \":\" + neighbor.y;\n            if (neighborsMap[key] === undefined) {\n                neighborsMap[key] = []\n            }\n            neighborsMap[key].push(indicies[i])\n        }\n    }\n    return neighborsMap;\n}\n\nconst removeSquare = (uniqueSquares, square) => {\n    let result = [];\n    for (let i = 0; i < uniqueSquares.length; i++) {\n        let uniqueSquare = uniqueSquares[i];\n        if (!isSameSquare(square, uniqueSquare)) {\n            result.push(uniqueSquare);\n        }\n    }\n    return result;\n}\n\nconst buildSquare = (y, x, value) => { return {id: y + \":\" + x, y: y, x: x, value: value, failing: false, locked:false};}\nconst isSameSquare = (s1, s2) => {return s1.x === s2.x && s1.y === s2.y;}\nconst getKey = (square) => {return square.x + \":\" + square.y;}\nconst isEmptyArray = (array) => {return !array || !array.length;}\n\nexport default Suduko;\n","import React from 'react';\nimport {Suduko} from './suduko'\nimport './App.css';\n\nfunction App() {\n  return (\n      <div className={'App'}>\n      <Suduko/>\n      </div>\n      );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}