{"version":3,"sources":["suduko/Suduko.js","App.js","serviceWorker.js","index.js"],"names":["Square","useHint","title","disabled","key","square","handleInput","showHint","value","opacity","style","display","gridColumn","gridRow","fontSize","type","onPaste","onKeyDown","defaultValue","size","maxLength","Timer","run","initialTime","useMemo","Date","getTime","toTime","distance","days","Math","floor","hours","minutes","seconds","getElapsedTime","time0","useTimer","useState","time","setTime","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","withNumbersHint","gameBoard","neigborsMap","newGameBoard","Object","keys","map","x","split","y","getPosFromKey","forEach","pos","currentValue","getNumberOnGameboard","mapHint","n","oldValue","isEmptyArray","number","gameboard","getKeyFromPos","getNeighbors","filter","neighbor","isSamePos","getAllNeighborsWithNumber","placeNumberOnGameBoard","mapGameboardSquare","values","getIndicies","numberOfRows","numberOfCols","allInidicies","row","rowIndicies","col","push","buildPos","quadrantSize","quadrantRows","quadrantCols","rowsInQuadrant","colsInQuadrant","quadrantRow","quadrantCol","quadrantIndicies","poss","fn","gb","deepCopy","Array","isArray","result","getUniquePoss","a","length","i","j","tmp","b","buildSquare","failing","locked","possible","numStr","Number","s1","s2","array","JSON","parse","stringify","Suduko","runTimer","setRunTimer","indicies","neighborsMap","undefined","getNeighborsMap","window","location","href","setHref","params","searchParams","URLSearchParams","search","get","pushState","_href","history","dispatchEvent","Event","addEventListener","setQueryParam","param","set","getQueryParam","useHistory","validQueryParameters","test","is","numbers","failingSquareOnGameBoard","withValidateNumbers","height","width","getInitialGameBoard","valuesAsString","concat","parseInt","getGameBoardValues","remainingNumbers","getNumberOfEmptyPositionsInGameboard","setGameBoard","join","evt","input","theEvent","event","keyCode","which","String","fromCharCode","returnValue","preventDefault","validateInput","nextGameBoard","boardUI","cols","tdClassnames","props","classNames","possibleNumbers","entries","className","margin","onClick","marginLeft","checked","onChange","e","newUseHintValue","target","getHintValues","hints","valueAdded","hintValues","counter","addSingletonValues","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9e97246b.chunk.js","sourcesContent":["import React, {useMemo, useState, useEffect, useRef} from 'react';\n\nfunction Suduko() {\n    const size = 3;\n    const [runTimer, setRunTimer] = useState(true);\n    const indicies = useMemo(() => getIndicies(size), [size]);\n    const neigborsMap = useMemo(() => getNeighborsMap(getIndicies(size)), [size]);\n    const {setQueryParam, getQueryParam} = useHistory();\n\n    const useHint = useMemo(() => {\n        return getQueryParam('h') === \"true\"||false;\n    }, [getQueryParam]);\n\n    function setUseHint(newUseHintValue){\n        setQueryParam('h', newUseHintValue);\n    }\n\n    const validQueryParameters = useMemo(() => {\n        return /^[0-9]*$/.test(getQueryParam('b')) && /^(true|false)?$/.test(getQueryParam('h'))\n    }, [getQueryParam])\n    const gameBoard = useMemo(() => {\n        return withNumbersHint(withValidateNumbers(getInitialGameBoard(size, getGameBoardValues(getQueryParam('b'), size)), indicies), neigborsMap);\n        }, [getQueryParam, indicies, neigborsMap]);\n\n    const remainingNumbers = useMemo(() => {\n        return getNumberOfEmptyPositionsInGameboard(gameBoard);\n    }, [gameBoard])\n\n    function setGameBoard(gb){\n        var result = [];\n        for (var i = 0 ; i < gb.length; i++) {\n            for (var j = 0; j < gb[i].values.length; j++) {\n                result.push(gb[i].values[j].value);\n            }\n        }\n        setQueryParam('b', result.join(''))\n    }\n\n    const handleInput = (square) => (evt) => {\n        let input = validateInput(evt);\n        if (input) {\n            let number = input !== \"*\" ? input : 0;\n            let nextGameBoard = deepCopy(gameBoard);\n            nextGameBoard = placeNumberOnGameBoard(number, nextGameBoard, square);\n            setGameBoard(nextGameBoard);\n\n        }\n    }\n    let boardUI = gameBoard.map(row => {\n        let cols = row.values.map(square => {\n            let tdClassnames = classNames({\n                \"verticalBorder\": square.x === 2 || square.x === 5,\n                \"horizontalBorder\" : square.y === 2 || square.y === 5,\n                \"failed\" : square.failing\n            });\n            let possibleNumbers = [];\n            for (let [key, value] of Object.entries(square.possible)) {\n                if (key !== \"0\" && value) {\n                    possibleNumbers.push(key);\n                }\n            }\n            let title = possibleNumbers.join(\", \");\n\n            return (\n                <td key={square.id} className={tdClassnames}>\n                    <Square useHint={useHint} title={title} disabled={square.locked} key={square.id} handleInput={handleInput} square={square}/>\n                </td>\n            )\n        });\n        return (\n            <tr key={row.id}>\n                {cols}\n            </tr>\n        )\n    })\n\n    function toggleTimerActive(){\n        setRunTimer(!runTimer);\n    }\n\n    function onUseHintChanged(e){\n        setUseHint(e.target.checked);\n    }\n    function onAddSigletonValuesClicked(){\n        addSingletonValues(gameBoard, setGameBoard, neigborsMap);\n    }\n\n    return (\n        <>\n            <h1>Welcome to Suduko</h1>\n            {!validQueryParameters &&\n                <p>Invalid request parameters, only 0-9 are allowed as numbers and 'true', or 'false', as boolean values</p>\n            }\n            {validQueryParameters &&\n                <>\n                    <Timer run={runTimer && remainingNumbers > 0}/>\n                    <button style={{margin:\"10px\"}} onClick={toggleTimerActive} disabled={remainingNumbers === 0} >{runTimer?\"Pause\":\"Continue\"}</button>\n                    <p>\n                        {remainingNumbers > 0 && \"Numbers to play: \" + remainingNumbers}\n                        {remainingNumbers > 0 && <span style={{marginLeft:\"10px\"}}>Use hints: <input type={\"checkbox\"} checked={useHint} onChange={onUseHintChanged}/></span>}\n                        {remainingNumbers === 0 && \"Congratulation, no more numbers to play!\"}\n                    </p>\n                    <table className={\"App gameBoard\"}>\n                        <tbody>{boardUI}</tbody>\n                    </table>\n                    {remainingNumbers > 0 && <button onClick={onAddSigletonValuesClicked}>Insert singleton values</button>}\n                </>\n            }\n        </>\n    );\n}\n\nfunction Square({useHint, title, disabled, key, square, handleInput}){\n    const showHint = useHint && square.value === 0;\n    const opacity = showHint ? 0.5 : 1.0;\n    return (\n        <div style={{display:\"grid\"}}>\n            {showHint && <span style={{gridColumn:1, gridRow:1, fontSize:\"10px\"}}>{title}</span>}\n            <input style={{gridColumn:1, gridRow:1, opacity:opacity}} title={title} disabled={disabled} key={key} type={\"text\"} onPaste={handleInput(square)} onKeyDown={handleInput(square)} defaultValue={square.value === 0 ? '' : square.value} size={1} maxLength={1}/>\n          </div>\n    )\n}\nfunction useHistory(){\n        const [href, setHref] = useState(window.location.href);\n        const params = useMemo(() => {\n            let searchParams = new URLSearchParams(window.location.search);\n            let params = {};\n            for(var key of searchParams.keys()){\n                params[key] = searchParams.get(key);\n            }\n            return params;\n        }, [window.location.search]);\n\n        useEffect(() => {\n            window.addEventListener('popstate', () => {\n                setHref(window.location.href)\n            });\n        }, [])\n\n        function pushState(_href){\n            window.history.pushState({}, '', _href)\n            window.dispatchEvent(new Event('popstate'));\n        }\n        function setQueryParam(param, value){\n            let searchParams = new URLSearchParams(window.location.search);\n            searchParams.set(param, value);\n            pushState(window.location.href.split(\"?\")[0] + \"?\" + searchParams)\n        }\n        function getQueryParam(param){\n            let searchParams = new URLSearchParams(window.location.search);\n            return searchParams.get(param);\n        }\n\n        return {href, params, pushState, setQueryParam, getQueryParam};\n\n}\n\nfunction Timer({run}){\n        const {getElapsedTime, time0} = useTimer();\n        const [time, setTime] = useState(time0);\n\n        useInterval(() => {\n            setTime(getElapsedTime());\n        }, run ? 1000 : null)\n\n        return (\n            <>\n            {time.days}d {time.hours}h {time.minutes}m {time.seconds}s\n            </>\n        )\n}\n\nfunction useTimer(){\n    const initialTime = useMemo(() => {\n        return new Date().getTime();\n    },[])\n\n    function getElapsedTime(){\n        let now = new Date().getTime();\n        let distance = now - initialTime;\n        return toTime(distance);\n    }\n    function time0(){\n        return toTime(0)\n    }\n\n    function toTime(distance){\n        return {\n            days: distance ? Math.floor(distance / (1000 * 60 * 60 * 24)) : 0,\n            hours: distance ? Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)) : 0,\n            minutes: distance ? Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)) : 0,\n            seconds: distance ? Math.floor((distance % (1000 * 60)) / 1000) : 0\n        }\n    }\n    return{\n        getElapsedTime,\n        time0,\n    }\n}\n\nfunction useInterval(callback, delay){\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nfunction getGameBoardValues(valuesAsString, size){\n        let height = size*size;\n        let width = size*size;\n        let values = (valuesAsString?valuesAsString.split(''):[]).concat(new Array(height * width));\n        var result = [];\n        for (var i = 0 ; i < height; i++) {\n            result[i] = [];\n            for (var j = 0; j < width; j++) {\n                result[i][j] = parseInt(values[i*height+j]||'0', 10);\n            }\n        }\n        return result;\n\n}\n\nfunction withValidateNumbers(gameBoard, indicies){\n    let newGameBoard = [...gameBoard];\n    indicies.forEach(is => {\n        let numbers = {};\n        is.forEach(i => {\n            let n = getNumberOnGameboard(gameBoard, i);\n            if(n !== 0){\n                if(numbers[n]){\n                    numbers[n].push(i)\n                } else {\n                    numbers[n] = [i]\n                }\n            }\n        })\n        if(Object.keys(numbers).length > 1)\n            Object.keys(numbers).forEach(key => {\n                if(numbers[key].length > 1){\n                    numbers[key].forEach(pos =>{\n                        newGameBoard = failingSquareOnGameBoard(newGameBoard, pos);\n                    })\n                }\n            })\n\n    })\n    return newGameBoard;\n}\nfunction withNumbersHint(gameBoard, neigborsMap){\n    let newGameBoard = [...gameBoard];\n    Object.keys(neigborsMap)\n    .map(key => getPosFromKey(key))\n    .forEach(pos => {\n        let currentValue = getNumberOnGameboard(newGameBoard, pos);\n        if(currentValue === 0){\n            newGameBoard = mapHint(newGameBoard, pos, (n, oldValue) => {\n                return isEmptyArray(getAllNeighborsWithNumber(neigborsMap, pos, n, gameBoard));\n            });\n        } else {\n            newGameBoard = mapHint(newGameBoard, pos, (n, oldValue)=> {\n                return n === 0 ;\n            });\n        }\n    })\n    return newGameBoard;\n}\n\nfunction validateInput(evt){\n    var theEvent = evt || window.event;\n    var keyCode = theEvent.keyCode || theEvent.which;\n    let key = String.fromCharCode(keyCode);\n\n    var regex = /[1-9]/;\n    if (!regex.test(key)) {\n        theEvent.returnValue = false;\n        if (/[ -~]/.test(key) && theEvent.preventDefault) {\n            theEvent.preventDefault();\n        }\n        if (keyCode === 8 || keyCode === 32) {\n            return \"*\";\n        }\n        return;\n    } else {\n        return key;\n    }\n}\nfunction classNames(props) {\n    var result = '';\n    Object.keys(props).forEach((key) => {\n        if(props[key]){\n            result += key;\n            result += ' ';\n        }\n    })\n    return result;\n}\n\nfunction getNeighbors(neigborsMap, pos){\n    return [...neigborsMap[getKeyFromPos(pos)]];\n}\n\nfunction getAllNeighborsWithNumber(neigborsMap, pos, number, gameboard) {\n    return getNeighbors(neigborsMap,pos).filter((neighbor) => {\n        return !isSamePos(pos, neighbor) && number === getNumberOnGameboard(gameboard, neighbor);\n    });\n}\n\nfunction failingSquareOnGameBoard(gameBoard, pos) {\n    return mapGameboardSquare(gameBoard, pos, (square) => {square.failing = true;})\n}\nfunction placeNumberOnGameBoard(number, gameBoard, pos) {\n    return mapGameboardSquare(gameBoard, pos, (square) => {square.value = number;})\n}\nfunction getNumberOnGameboard(gameBoard, pos) {\n    return gameBoard[pos.y].values[pos.x].value;\n}\nfunction getNumberOfEmptyPositionsInGameboard(gameBoard) {\n    let height = gameBoard.length;\n    let width = gameBoard.length;\n    var result = width*height;\n    for (var i = 0 ; i < height; i++) {\n        for (var j = 0; j < width; j++) {\n            if(gameBoard[i].values[j].value > 0){\n                result -= 1\n            }\n        }\n    }\n    return result;\n}\n\nfunction addSingletonValues(gameBoard, setGameBoard, neigborsMap) {\n    function getHintValues(hints){\n        let values = [];\n        Object.keys(hints).forEach((key) => {\n            if(hints[key]){\n                values.push(key);\n            }\n        });\n        return values;\n    }\n    let height = gameBoard.length;\n    let width = gameBoard.length;\n    let newGameBoard = deepCopy(gameBoard);\n    var counter = 0;\n    do{\n        var valueAdded=false;\n        for (var y = 0 ; y < height; y++) {\n            for (var x = 0; x < width; x++) {\n                if(newGameBoard[y].values[x].value === 0){\n                    let hintValues = getHintValues(newGameBoard[y].values[x].possible);\n                    if(hintValues.length === 1){\n                        newGameBoard = withNumbersHint(placeNumberOnGameBoard(Number(hintValues[0]), newGameBoard, buildPos(y,x)), neigborsMap);\n                        valueAdded=true\n                        counter++;\n                    }\n                }\n            }\n        }\n    } while(valueAdded);\n    setGameBoard(newGameBoard);\n}\n\nfunction getInitialGameBoard(size, values) {\n    let height = size*size;\n    let width = size*size;\n    var result = [];\n    for (var i = 0 ; i < height; i++) {\n        result[i] = {id:i, values:[]};\n        for (var j = 0; j < width; j++) {\n            result[i].values[j] = buildSquare(i, j, values[i][j]);\n        }\n    }\n    return result;\n}\n\nfunction getIndicies(size){\n    let numberOfRows = size*size;\n    let numberOfCols = size*size;\n    let allInidicies = [];\n\n    // Add all rows\n    for(let row = 0; row < numberOfRows; row++){\n        let rowIndicies = [];\n        for(let col = 0; col < numberOfCols; col++){\n            rowIndicies.push(buildPos(row, col));\n        }\n        allInidicies.push(rowIndicies);\n    }\n    // Add all columns\n    for(let col = 0; col < numberOfCols ; col++){\n        let rowIndicies = [];\n        for(let row = 0; row < numberOfRows; row++){\n            rowIndicies.push(buildPos(row, col));\n        }\n        allInidicies.push(rowIndicies);\n    }\n\n    /*\n     *  0  1  |  4  5\n     *  2  3  |  6  7\n     * -------+-------\n     *  8  9  | 12 13\n     * 10 11  | 14 15\n     *\n     *  0 -> 0:0 1 -> 0:1   2 -> 1:0   3 -> 1:1\n     *  4 -> 0:2 5 -> 0:3   6 -> 1:2   7 -> 1:3\n     *  8 -> 2:0 9 -> 2:1  10 -> 3:0  11 -> 3:1\n     * 12 -> 2:2 13 -> 2:3 14 -> 3:2  15 -> 3:3\n     *\n     */\n    const quadrantSize = size;\n    const numOfQuadrants = size;\n    let quadrantRows = numOfQuadrants;\n    let quadrantCols = numOfQuadrants;\n    let rowsInQuadrant = quadrantSize;\n    let colsInQuadrant = quadrantSize;\n\n    for (let quadrantRow = 0; quadrantRow < quadrantRows; quadrantRow++) {\n        for (let quadrantCol = 0; quadrantCol < quadrantCols; quadrantCol++) {\n            let quadrantIndicies = [];\n            for (let row = 0; row < rowsInQuadrant; row++) {\n                for (let col = 0; col < colsInQuadrant; col++) {\n                    let x = (quadrantCol*quadrantSize) + col;\n                    let y = (quadrantRow*quadrantSize) + row;\n                    quadrantIndicies.push(buildPos(y, x));\n                }\n            }\n            allInidicies.push(quadrantIndicies);\n        }\n    }\n\n    return allInidicies;\n}\nfunction getNeighborsMap(indicies){\n    let neighborsMap = {};\n    for(let i = 0; i < indicies.length; i++){\n        for(let j = 0; j < indicies[i].length; j++){\n            let key = getKeyFromPos(indicies[i][j]);\n            if (neighborsMap[key] === undefined) {\n                neighborsMap[key] = []\n            }\n            neighborsMap[key] = getUniquePoss([...neighborsMap[key], ...indicies[i]]);\n        }\n    }\n    return neighborsMap;\n}\n\nfunction mapGameboardSquare(gameboard, poss, fn){\n    let gb = deepCopy(gameboard);\n    let ps = Array.isArray(poss) ? poss : [poss];\n    ps.forEach((pos) => {\n        let result = fn(gb[pos.y].values[pos.x]);\n        if( typeof result !== 'undefined'){\n            gb[pos.y].values[pos.x] = result;\n        }\n\n    })\n    return gb;\n}\n\nfunction getUniquePoss(a) {\n    if(a.length === 0){\n        return [];\n    }\n    var b = [a[0]], i, j, tmp;\n    for (i = 1; i < a.length; i++) {\n        tmp = 1;\n        for (j = 0; j < b.length; j++) {\n            if (isSamePos(a[i], b[j])) {\n                tmp = 0;\n                break;\n            }\n        }\n        if (tmp) {\n            b.push(a[i]);\n        }\n    }\n    return b;\n}\n\nfunction buildSquare(y, x, value){\n    let square = {\n        id: y + \":\" + x,\n        y: y,\n        x: x,\n        value: value,\n        failing: false,\n        locked: false,\n        possible: {\"0\": true, \"1\": true, \"2\": true, \"3\": true, \"4\": true, \"5\": true, \"6\": true, \"7\": true, \"8\": true, \"9\": true}\n    };\n    square.possible[value] = false;\n    return square;\n}\nfunction mapHint(gameBoard, poss, fn){\n    return mapGameboardSquare(gameBoard, poss, (square)=>{\n        Object.keys(square.possible).forEach(numStr => {\n            square.possible[numStr] = fn(Number(numStr),square.possible[numStr]);\n        })\n        return square;\n    })\n}\n\nfunction buildPos(y,x){return {y:y, x:x}};\nfunction isSamePos(s1, s2){return s1.x === s2.x && s1.y === s2.y;}\nfunction getKeyFromPos(pos){return pos.x + \":\" + pos.y;}\nfunction getPosFromKey(key){return {x:key.split(\":\")[0], y:key.split(\":\")[1]};}\n\nconst isEmptyArray = (array) => {return !array || !array.length;}\nfunction deepCopy(gameBoard) {return JSON.parse(JSON.stringify(gameBoard));}\n\n\nexport default Suduko;\n","import React from 'react';\nimport {Suduko} from './suduko'\nimport './App.css';\n\nfunction App() {\n  return (\n      <div className={'App'}>\n      <Suduko/>\n      </div>\n      );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}