{"version":3,"sources":["suduko/Suduko.js","App.js","serviceWorker.js","index.js"],"names":["validateInput","evt","theEvent","window","event","keyCode","which","key","String","fromCharCode","test","returnValue","preventDefault","validMove","gameBoard","square","number","neigborsMap","x","y","getKey","every","neigbors","someNeighborHaveNumber","neighbors","some","neighbor","values","value","getNumberOnGameBoard","Suduko","useMemo","indicies","neighborsMap","i","length","j","undefined","push","getNeighborsMap","size","numberOfRows","numberOfCols","allInidicies","row","rowIndicies","col","quadrantSize","quadrantRows","quadrantCols","rowsInQuadrant","colsInQuadrant","quadrantRow","quadrantCol","quadrantIndicies","getIndicies","useState","height","width","result","id","failing","getInitialGameBoard","setGameBoard","handleInput","input","nextGameBoard","clearFailingSquareOnGameBoard","failingSquareOnGameBoard","placeNumberOnGameBoard","boardUI","map","cols","tdClassnames","props","Object","keys","forEach","classNames","className","type","onPaste","onKeyDown","defaultValue","maxLength","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b071251a.chunk.js","sourcesContent":["import React, {useMemo, useState} from 'react';\n\nfunction classNames(props) {\n    var result = '';\n    Object.keys(props).forEach((key) => {\n        if(props[key]){\n            result += key;\n            result += ' ';\n        }\n    })\n    return result;\n}\n\nfunction Suduko() {\n    const size = 3;\n    const neigborsMap = useMemo(() => getNeighborsMap(getIndicies(size)), [size]);\n    const [gameBoard, setGameBoard] = useState(() => getInitialGameBoard(size));\n\n    const handleInput = (square) => (evt) => {\n        let input = validateInput(evt);\n        if(input){\n            let number = input !== \"*\" ? input : 0;\n            let nextGameBoard = [...gameBoard];\n            if (number === 0 || validMove(nextGameBoard, square, number, neigborsMap)) {\n                nextGameBoard = clearFailingSquareOnGameBoard(nextGameBoard, square)\n            } else {\n                nextGameBoard = failingSquareOnGameBoard(nextGameBoard, square)\n            }\n            setGameBoard(placeNumberOnGameBoard(number, nextGameBoard, square));\n        }\n    }\n    let boardUI = gameBoard.map(row => {\n        let cols = row.values.map(square => {\n            let tdClassnames = classNames({\n                \"verticalBorder\": square.x === 2 || square.x === 5,\n                \"horizontalBorder\" : square.y === 2 || square.y === 5,\n                \"failed\" : square.failing\n            });\n            return (\n                <td key={square.id} className={tdClassnames}>\n                    <input key={square.id} type={\"text\"} onPaste={handleInput(square)} onKeyDown={handleInput(square)} defaultValue={square.value === 0 ? '' : square.value} size={1} maxLength={1}/>\n                </td>\n            )\n        });\n        return (\n            <tr key={row.id}>\n                {cols}\n            </tr>\n        )\n    })\n    return (\n        <>\n            <h1>Welcome to Suduko</h1>\n            <table className={\"App gameBoard\"}>\n                <tbody>{boardUI}</tbody>\n            </table>\n        </>\n    );\n}\nconst validateInput = (evt) => {\n    var theEvent = evt || window.event;\n    var keyCode = theEvent.keyCode || theEvent.which;\n    let key = String.fromCharCode(keyCode);\n\n    var regex = /[1-9]/;\n    if (!regex.test(key)) {\n        theEvent.returnValue = false;\n        if (/[:print:]/.test(key) && theEvent.preventDefault) {\n            theEvent.preventDefault();\n        }\n        if (keyCode === 8 || keyCode === 32) {\n            return \"*\";\n        }\n        return;\n    } else {\n        return key;\n    }\n}\n\nfunction getKey(square) {\n    return square.x + \":\" + square.y;\n}\n\nconst validMove = (gameBoard, square, number, neigborsMap) => {\n    return neigborsMap[getKey(square)].every((neigbors) => {\n        return !someNeighborHaveNumber(number, gameBoard, neigbors);\n    })\n}\n\nconst someNeighborHaveNumber = (number, gameBoard, neighbors) => {\n    return neighbors.some((neighbor) => number === getNumberOnGameBoard(gameBoard, neighbor))\n\n\n}\nfunction failingSquareOnGameBoard(gameBoard, square) {\n    gameBoard[square.y].values[square.x].failing = true;\n    return gameBoard;\n}\nfunction clearFailingSquareOnGameBoard(gameBoard, square) {\n    gameBoard[square.y].values[square.x].failing = false;\n    return gameBoard;\n}\nfunction placeNumberOnGameBoard(number, gameBoard, square) {\n    gameBoard[square.y].values[square.x].value = number;\n    return gameBoard;\n}\nfunction getNumberOnGameBoard(gameBoard, square) {\n    return gameBoard[square.y].values[square.x].value;\n}\n\nfunction buildSquare(y, x, value) {\n    return {id: y + \":\" + x, y: y, x: x, value: value, failing: false};\n}\n\nfunction getInitialGameBoard(size) {\n    let height = size*size;\n    let width = size*size;\n    var result = [];\n    for (var i = 0 ; i < height; i++) {\n        result[i] = {id:i, values:[]};\n        for (var j = 0; j < width; j++) {\n            result[i].values[j] = buildSquare(i, j, 0);\n        }\n    }\n    return result;\n}\nfunction getIndicies(size){\n    let numberOfRows = size*size;\n    let numberOfCols = size*size;\n    let allInidicies = [];\n\n    // Add all rows\n    for(let row = 0; row < numberOfRows; row++){\n        let rowIndicies = [];\n        for(let col = 0; col < numberOfCols; col++){\n            rowIndicies.push({\"x\": col, \"y\":row})\n        }\n        allInidicies.push(rowIndicies);\n    }\n    // Add all columns\n    for(let col = 0; col < numberOfCols ; col++){\n        let rowIndicies = [];\n        for(let row = 0; row < numberOfRows; row++){\n            rowIndicies.push({\"x\": col, \"y\":row})\n        }\n        allInidicies.push(rowIndicies);\n    }\n\n    /*\n     *  0  1  |  4  5\n     *  2  3  |  6  7\n     * -------+-------\n     *  8  9  | 12 13\n     * 10 11  | 14 15\n     *\n     *  0 -> 0:0 1 -> 0:1   2 -> 1:0   3 -> 1:1\n     *  4 -> 0:2 5 -> 0:3   6 -> 1:2   7 -> 1:3\n     *  8 -> 2:0 9 -> 2:1  10 -> 3:0  11 -> 3:1\n     * 12 -> 2:2 13 -> 2:3 14 -> 3:2  15 -> 3:3\n     *\n     */\n    const quadrantSize = size;\n    const numOfQuadrants = size;\n    let quadrantRows = numOfQuadrants;\n    let quadrantCols = numOfQuadrants;\n    let rowsInQuadrant = quadrantSize;\n    let colsInQuadrant = quadrantSize;\n\n    for (let quadrantRow = 0; quadrantRow < quadrantRows; quadrantRow++) {\n        for (let quadrantCol = 0; quadrantCol < quadrantCols; quadrantCol++) {\n            let quadrantIndicies = [];\n            for (let row = 0; row < rowsInQuadrant; row++) {\n                for (let col = 0; col < colsInQuadrant; col++) {\n                    let x = (quadrantCol*quadrantSize) + col;\n                    let y = (quadrantRow*quadrantSize) + row;\n                    quadrantIndicies.push({\"x\":x, \"y\":y});\n                }\n            }\n            allInidicies.push(quadrantIndicies);\n        }\n    }\n\n    return allInidicies;\n}\n\nfunction getNeighborsMap(indicies){\n    let neighborsMap = {};\n    for(let i = 0; i < indicies.length; i++){\n        for(let j = 0; j < indicies[i].length; j++){\n            let neighbor = indicies[i][j];\n            let key = neighbor.x + \":\" + neighbor.y;\n            if (neighborsMap[key] === undefined) {\n                neighborsMap[key] = []\n            }\n            neighborsMap[key].push(indicies[i])\n        }\n    }\n    return neighborsMap;\n}\n\nexport default Suduko;\n","import React from 'react';\nimport {Suduko} from './suduko'\nimport './App.css';\n\nfunction App() {\n  return (\n      <div className={'App'}>\n      <Suduko/>\n      </div>\n      );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}