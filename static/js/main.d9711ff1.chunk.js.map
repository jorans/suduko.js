{"version":3,"sources":["suduko/Suduko.js","App.js","serviceWorker.js","index.js"],"names":["validateInput","evt","theEvent","window","event","key","keyCode","which","String","fromCharCode","test","returnValue","preventDefault","getInitialGameBoard","result","i","id","values","j","y","x","value","Suduko","useState","gameBoard","setGameBoard","handleInput","square","console","log","number","nextGameBoard","pos","placeNumberOnGameBoard","boardUI","map","row","cols","tdClassnames","props","Object","keys","forEach","classNames","className","type","onPaste","onKeyPress","defaultValue","size","maxLength","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oPAqDA,IAAMA,EAAgB,SAACC,GACnB,IAAIC,EAAWD,GAAOE,OAAOC,MACzBC,EAAMH,EAASI,SAAWJ,EAASK,MACvCF,EAAMG,OAAOC,aAAaJ,GAG1B,MADY,QACDK,KAAKL,GAOLA,GANPH,EAASS,aAAc,EACnBT,EAASU,oBAEbV,EAASU,mBAWjB,SAASC,IAIL,IAHA,IAEIC,EAAS,GACJC,EAAI,EAAIA,EAHJ,EAGgBA,IAAK,CAC9BD,EAAOC,GAAK,CAACC,GAAGD,EAAGE,OAAO,IAC1B,IAAK,IAAIC,EAAI,EAAGA,EAJR,EAImBA,IACvBJ,EAAOC,GAAGE,OAAOC,GAAK,CAACF,GAAGD,EAAE,IAAIG,EAAEC,EAAEJ,EAAEK,EAAEF,EAAGG,MAAM,GAGzD,OAAOP,EAUIQ,MAjFf,WAAkB,MAEoBC,mBAASV,GAF7B,mBAEPW,EAFO,KAEIC,EAFJ,KAIRC,EAAc,SAACC,GAAD,OAAY,SAAC1B,GAC7B2B,QAAQC,IAAI,cAAeL,GAC3B,IAAIM,EAAS9B,EAAcC,GAC3B,GAAG6B,EAAO,CACN,IAAIC,EAgDhB,SAAgCD,EAAQN,EAAWQ,GAG/C,OAFAJ,QAAQC,IAAI,yBAA0BC,EAAQE,EAAKR,GACnDA,EAAUQ,EAAIb,GAAGF,OAAOe,EAAIZ,GAAGC,MAAQS,EAChCN,EAnDqBS,CAAuBH,EAAQN,EAAWG,GAE9DF,EAAaM,MAGjBG,EAAUV,EAAUW,IAAI,SAAAC,GACxB,IAAIC,EAAOD,EAAInB,OAAOkB,IAAI,SAAAR,GACtB,IAAIW,EA1BhB,SAAoBC,GAChB,IAAIzB,EAAS,GAOb,OANA0B,OAAOC,KAAKF,GAAOG,QAAQ,SAACrC,GACrBkC,EAAMlC,KACLS,GAAUT,EACVS,GAAU,OAGXA,EAkBoB6B,CAAW,CAC1B,eAA+B,IAAbhB,EAAOP,GAAwB,IAAbO,EAAOP,EAC3C,iBAAkC,IAAbO,EAAOR,GAAwB,IAAbQ,EAAOR,IAElD,OACI,wBAAId,IAAKsB,EAAOX,GAAI4B,UAAWN,GAC3B,2BAAOO,KAAM,OAAQC,QAASpB,EAAYC,GAASoB,WAAYrB,EAAYC,GAASqB,aAA+B,IAAjBrB,EAAON,MAAc,GAAKM,EAAON,MAAO4B,KAAM,EAAGC,UAAW,OAI1K,OACI,wBAAI7C,IAAK+B,EAAIpB,IACRqB,KAIb,OACI,oCACI,iDACA,2BAAOO,UAAW,iBACd,+BAAQV,M,MCpCTiB,MARf,WACE,OACI,yBAAKP,UAAW,OAChB,kBAAC,EAAD,QCKcQ,QACW,cAA7BjD,OAAOkD,SAASC,UAEe,UAA7BnD,OAAOkD,SAASC,UAEhBnD,OAAOkD,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d9711ff1.chunk.js","sourcesContent":["import React, {useState} from 'react';\n\nfunction classNames(props) {\n    var result = '';\n    Object.keys(props).forEach((key) => {\n        if(props[key]){\n            result += key;\n            result += ' ';\n        }\n    })\n    return result;\n}\n\nfunction Suduko() {\n    // const [state, setState] = useState(getInitialState());\n    const [gameBoard, setGameBoard] = useState(getInitialGameBoard);\n\n    const handleInput = (square) => (evt) => {\n        console.log(\"handleInput\", gameBoard)\n        let number = validateInput(evt);\n        if(number){\n            let nextGameBoard = placeNumberOnGameBoard(number, gameBoard, square);\n            // setState({...state, gameBoard:nextGameBoard})\n            setGameBoard(nextGameBoard);\n        }\n    }\n    let boardUI = gameBoard.map(row => {\n        let cols = row.values.map(square => {\n            let tdClassnames = classNames({\n                \"verticalBorder\": square.x === 2 || square.x === 5,\n                \"horizontalBorder\" : square.y === 2 || square.y === 5\n            });\n            return (\n                <td key={square.id} className={tdClassnames}>\n                    <input type={\"text\"} onPaste={handleInput(square)} onKeyPress={handleInput(square)} defaultValue={square.value === 0 ? '' : square.value} size={1} maxLength={1}/>\n                </td>\n            )\n        });\n        return (\n            <tr key={row.id}>\n                {cols}\n            </tr>\n        )\n    })\n    return (\n        <>\n            <h1>Welcome to Suduko</h1>\n            <table className={\"App gameBoard\"}>\n                <tbody>{boardUI}</tbody>\n            </table>\n        </>\n    );\n}\nconst validateInput = (evt) => {\n    var theEvent = evt || window.event;\n    var key = theEvent.keyCode || theEvent.which;\n    key = String.fromCharCode(key);\n\n    var regex = /[1-9]/;\n    if (!regex.test(key)) {\n        theEvent.returnValue = false;\n        if (theEvent.preventDefault) {\n        }\n        theEvent.preventDefault();\n        return\n    } else {\n        return key;\n    }\n}\nfunction placeNumberOnGameBoard(number, gameBoard, pos) {\n    console.log(\"placeNumberOnGameBoard\", number, pos, gameBoard)\n    gameBoard[pos.y].values[pos.x].value = number;\n    return gameBoard;\n}\nfunction getInitialGameBoard() {\n    let height = 9;\n    let width = 9;\n    var result = [];\n    for (var i = 0 ; i < height; i++) {\n        result[i] = {id:i, values:[]};\n        for (var j = 0; j < width; j++) {\n            result[i].values[j] = {id:i+\":\"+j,y:i,x:j, value:0};\n        }\n    }\n    return result;\n}\n\n// function getInitialState() {\n//     return ({\n//         gameBoard: getInitialGameBoard()\n//     });\n// }\n\n\nexport default Suduko;\n","import React from 'react';\nimport {Suduko} from './suduko'\nimport './App.css';\n\nfunction App() {\n  return (\n      <div className={'App'}>\n      <Suduko/>\n      </div>\n      );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}