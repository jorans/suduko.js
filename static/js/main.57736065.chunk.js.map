{"version":3,"sources":["suduko/Suduko.js","App.js","serviceWorker.js","index.js"],"names":["validateInput","evt","theEvent","window","event","keyCode","which","key","String","fromCharCode","test","returnValue","preventDefault","getNeighbors","neigborsMap","pos","getKeyFromPos","getAllNeighborsWithNumber","number","gameboard","filter","neighbor","isSamePos","getNumberOnGameboard","validMove","gameBoard","isEmptyArray","failingSquareOnGameBoard","mapGameboardSquare","square","failing","clearFailingSquareOnGameBoard","placeNumberOnGameBoard","value","y","values","x","poss","fn","gb","deepCopy","Array","isArray","forEach","result","getUniquePoss","a","length","i","j","tmp","b","push","buildSquare","id","locked","possible","isValidNumber","buildPos","s1","s2","array","JSON","parse","stringify","Suduko","useMemo","indicies","neighborsMap","undefined","getNeighborsMap","size","numberOfRows","numberOfCols","allInidicies","row","rowIndicies","col","quadrantSize","quadrantRows","quadrantCols","rowsInQuadrant","colsInQuadrant","quadrantRow","quadrantCol","quadrantIndicies","getIndicies","useState","height","width","getInitialGameBoard","setGameBoard","savedGameboards","setSavedGameboards","handleInput","input","nextGameBoard","prevNumber","currentPos","s","updatePossibleNumbers","boardUI","map","cols","tdClassnames","props","Object","keys","classNames","possibleNumbers","entries","title","join","className","disabled","type","onPaste","onKeyDown","defaultValue","maxLength","onClick","nextSavedGameboards","nextGameboard","mapEachSquare","pop","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6PA0FA,IAAMA,EAAgB,SAACC,GACnB,IAAIC,EAAWD,GAAOE,OAAOC,MACzBC,EAAUH,EAASG,SAAWH,EAASI,MACvCC,EAAMC,OAAOC,aAAaJ,GAG9B,MADY,QACDK,KAAKH,GAULA,GATPL,EAASS,aAAc,EACnB,QAAQD,KAAKH,IAAQL,EAASU,gBAC9BV,EAASU,iBAEG,IAAZP,GAA6B,KAAZA,EACV,SAEX,IAuBR,SAASQ,EAAaC,EAAaC,GAC/B,OAAO,YAAID,EAAYE,EAAcD,KAGzC,SAASE,EAA0BH,EAAaC,EAAKG,EAAQC,GACzD,OAAON,EAAaC,EAAYC,GAAKK,OAAO,SAACC,GACzC,OAAQC,EAAUP,EAAKM,IAAaH,IAAWK,EAAqBJ,EAAWE,KAYvF,IAAMG,EAAY,SAACC,EAAWV,EAAKG,EAAQJ,GAEvC,OADwB,IAAXI,GAAgBQ,EAAaT,EAA0BH,EAAaC,EAAKG,EAAQO,KAIlG,SAASE,EAAyBF,EAAWV,GACzC,OAAOa,EAAmBH,EAAWV,EAAK,SAACc,GAAYA,EAAOC,SAAU,IAE5E,SAASC,EAA8BN,EAAWV,GAC9C,OAAOa,EAAmBH,EAAWV,EAAK,SAACc,GAAYA,EAAOC,SAAU,IAE5E,SAASE,EAAuBd,EAAQO,EAAWV,GAC/C,OAAOa,EAAmBH,EAAWV,EAAK,SAACc,GAAYA,EAAOI,MAAQf,IAE1E,SAASK,EAAqBE,EAAWV,GACrC,OAAOU,EAAUV,EAAImB,GAAGC,OAAOpB,EAAIqB,GAAGH,MAiG1C,SAASL,EAAmBT,EAAWkB,EAAMC,GACzC,IAAIC,EAAKC,EAASrB,GASlB,OARSsB,MAAMC,QAAQL,GAAQA,EAAO,CAACA,IACpCM,QAAQ,SAAC5B,GACR,IAAI6B,EAASN,EAAGC,EAAGxB,EAAImB,GAAGC,OAAOpB,EAAIqB,IACf,qBAAXQ,IACPL,EAAGxB,EAAImB,GAAGC,OAAOpB,EAAIqB,GAAKQ,KAI3BL,EAGX,SAASM,EAAcC,GACnB,GAAgB,IAAbA,EAAEC,OACD,MAAO,GAEX,IAAgBC,EAAGC,EAAGC,EAAlBC,EAAI,CAACL,EAAE,IACX,IAAKE,EAAI,EAAGA,EAAIF,EAAEC,OAAQC,IAAK,CAE3B,IADAE,EAAM,EACDD,EAAI,EAAGA,EAAIE,EAAEJ,OAAQE,IACtB,GAAI3B,EAAUwB,EAAEE,GAAIG,EAAEF,IAAK,CACvBC,EAAM,EACN,MAGJA,GACAC,EAAEC,KAAKN,EAAEE,IAGjB,OAAOG,EAGX,IAAME,EAAc,SAACnB,EAAGE,EAAGH,GACvB,IAAIJ,EAAS,CACTyB,GAAIpB,EAAI,IAAME,EACdF,EAAGA,EACHE,EAAGA,EACHH,MAAOA,EACPH,SAAS,EACTyB,QAAQ,EACRC,SAAU,CAAC,GAAK,EAAM,GAAK,EAAM,GAAK,EAAM,GAAK,EAAM,GAAK,EAAM,GAAK,EAAM,GAAK,EAAM,GAAK,EAAM,GAAK,EAAM,GAAK,IAGvH,OADA3B,EAAO2B,SAASvB,IAAS,EAClBJ,GAEL4B,EAAgB,SAAC5B,EAAQX,GAAY,OAAOW,EAAO2B,SAAStC,IAE5DwC,EAAW,SAACxB,EAAEE,GAAO,MAAO,CAACF,EAAEA,EAAGE,EAAEA,IACpCd,EAAY,SAACqC,EAAIC,GAAQ,OAAOD,EAAGvB,IAAMwB,EAAGxB,GAAKuB,EAAGzB,IAAM0B,EAAG1B,GAC7DlB,EAAgB,SAACD,GAAS,OAAOA,EAAIqB,EAAI,IAAMrB,EAAImB,GAEnDR,EAAe,SAACmC,GAAW,OAAQA,IAAUA,EAAMd,QACzD,SAASP,EAASf,GAAY,OAAOqC,KAAKC,MAAMD,KAAKE,UAAUvC,IAGhDwC,MAvTf,WACI,IACMnD,EAAcoD,kBAAQ,kBAqOhC,SAAyBC,GAErB,IADA,IAAIC,EAAe,GACXpB,EAAI,EAAGA,EAAImB,EAASpB,OAAQC,IAChC,IAAI,IAAIC,EAAI,EAAGA,EAAIkB,EAASnB,GAAGD,OAAQE,IAAI,CACvC,IAAI1C,EAAMS,EAAcmD,EAASnB,GAAGC,SACVoB,IAAtBD,EAAa7D,KACb6D,EAAa7D,GAAO,IAExB6D,EAAa7D,GAAOsC,EAAc,GAAD,mBAAKuB,EAAa7D,IAAlB,YAA2B4D,EAASnB,MAG7E,OAAOoB,EAhP2BE,CA2KtC,SAAqBC,GAMjB,IALA,IAAIC,EAAeD,EAAKA,EACpBE,EAAeF,EAAKA,EACpBG,EAAe,GAGXC,EAAM,EAAGA,EAAMH,EAAcG,IAAM,CAEvC,IADA,IAAIC,EAAc,GACVC,EAAM,EAAGA,EAAMJ,EAAcI,IACjCD,EAAYxB,KAAKM,EAASiB,EAAKE,IAEnCH,EAAatB,KAAKwB,GAGtB,IAAI,IAAIC,EAAM,EAAGA,EAAMJ,EAAeI,IAAM,CAExC,IADA,IAAID,EAAc,GACVD,EAAM,EAAGA,EAAMH,EAAcG,IACjCC,EAAYxB,KAAKM,EAASiB,EAAKE,IAEnCH,EAAatB,KAAKwB,GAuBtB,IAPA,IAAME,EAAeP,EAEjBQ,EADmBR,EAEnBS,EAFmBT,EAGnBU,EAAiBH,EACjBI,EAAiBJ,EAEZK,EAAc,EAAGA,EAAcJ,EAAcI,IAClD,IAAK,IAAIC,EAAc,EAAGA,EAAcJ,EAAcI,IAAe,CAEjE,IADA,IAAIC,EAAmB,GACdV,EAAM,EAAGA,EAAMM,EAAgBN,IACpC,IAAK,IAAIE,EAAM,EAAGA,EAAMK,EAAgBL,IAAO,CAC3C,IAAIzC,EAAKgD,EAAYN,EAAgBD,EACjC3C,EAAKiD,EAAYL,EAAgBH,EACrCU,EAAiBjC,KAAKM,EAASxB,EAAGE,IAG1CsC,EAAatB,KAAKiC,GAI1B,OAAOX,EAnO2CY,CADrC,KACyD,CADzD,IADC,EAGoBC,mBAAS,kBA6J/C,SAA6BhB,EAAMH,GAI/B,IAHA,IAAIoB,EAASjB,EAAKA,EACdkB,EAAQlB,EAAKA,EACb3B,EAAS,GACJI,EAAI,EAAIA,EAAIwC,EAAQxC,IAAK,CAC9BJ,EAAOI,GAAK,CAACM,GAAGN,EAAGb,OAAO,IAC1B,IAAK,IAAIc,EAAI,EAAGA,EAAIwC,EAAOxC,IACvBL,EAAOI,GAAGb,OAAOc,GAAKI,EAAYL,EAAGC,EAAG,GAGhD,OAAOL,EAvK0C8C,CAFpC,KADC,mBAGPjE,EAHO,KAGIkE,EAHJ,OAIgCJ,mBAAS,IAJzC,mBAIPK,EAJO,KAIUC,EAJV,KAMRC,EAAc,SAACjE,GAAD,OAAY,SAAC5B,GAC7B,IAAI8F,EAAQ/F,EAAcC,GAC1B,GAAI8F,EAAO,CACP,IAAI7E,EAAmB,MAAV6E,EAAgBA,EAAQ,EACjCC,EAAgBxD,EAASf,GACzBwE,EAAa1E,EAAqBE,EAAWI,GACjD,GAAe,IAAXX,EAAc,CAId,IAAIqB,EAAKP,EAAuBd,EAFhC8E,EAAgBjE,EAA8BiE,EAAenE,GAENA,GAC7BZ,EAA0BH,EAAae,EAAQoE,EAAY1D,GACjEI,QAAQ,SAACtB,GAErB2E,EADAxE,EAAUe,EAAIlB,EAAU4E,EAAYnF,GACpBiB,EAA8BiE,EAAe3E,GAE7CM,EAAyBqE,EAAe3E,UAIhE2E,EADOvC,EAAc5B,EAAQX,GACba,EAA8BiE,EAAenE,GAE7CF,EAAyBqE,EAAenE,GAE5DmE,EAAgBhE,EAAuBd,EAAQ8E,EAAenE,GAC9DmE,EAwGZ,SAA+BE,EAAYpF,EAAaK,EAAWD,EAAQ+E,GACvE,IAAI5D,EAAI,CAAI6D,GAAJ,mBAAkBrF,EAAaC,EAAaoF,KAKpD,OAJ0BtE,EAAmBT,EAAWkB,EAAM,SAAC8D,GAC3DA,EAAE3C,SAAStC,IAAWI,EAAU4E,EAAYC,IAAM3E,EAAUL,EAAWgF,EAAGjF,EAAQJ,GAClFqF,EAAE3C,SAASyC,GAAczE,EAAUL,EAAWgF,EAAGF,EAAYnF,KA5GzCsF,CAAsBvE,EAAQf,EAAakF,EAAe9E,EAAQ+E,GAElFN,EAAaK,MAiBjBK,EAAU5E,EAAU6E,IAAI,SAAA3B,GACxB,IAAI4B,EAAO5B,EAAIxC,OAAOmE,IAAI,SAAAzE,GAOtB,IANA,IAAI2E,EAuDhB,SAAoBC,GAChB,IAAI7D,EAAS,GAOb,OANA8D,OAAOC,KAAKF,GAAO9D,QAAQ,SAACpC,GACrBkG,EAAMlG,KACLqC,GAAUrC,EACVqC,GAAU,OAGXA,EA/DoBgE,CAAW,CAC1B,eAA+B,IAAb/E,EAAOO,GAAwB,IAAbP,EAAOO,EAC3C,iBAAkC,IAAbP,EAAOK,GAAwB,IAAbL,EAAOK,EAC9C,OAAWL,EAAOC,UAElB+E,EAAkB,GACtB,MAAyBH,OAAOI,QAAQjF,EAAO2B,UAA/C,eAA0D,CAAC,IAAD,0BAAhDjD,EAAgD,KAA3C0B,EAA2C,KAC1C,MAAR1B,GAAe0B,GACf4E,EAAgBzD,KAAK7C,GAG7B,IAAIwG,EAAQF,EAAgBG,KAAK,MAEjC,OACI,wBAAIzG,IAAKsB,EAAOyB,GAAI2D,UAAWT,GAC3B,2BAAOO,MAAOA,EAAOG,SAAUrF,EAAO0B,OAAQhD,IAAKsB,EAAOyB,GAAI6D,KAAM,OAAQC,QAAStB,EAAYjE,GAASwF,UAAWvB,EAAYjE,GAASyF,aAA+B,IAAjBzF,EAAOI,MAAc,GAAKJ,EAAOI,MAAOsC,KAAM,EAAGgD,UAAW,OAIhO,OACI,wBAAIhH,IAAKoE,EAAIrB,IACRiD,KAIb,OACI,oCACI,iDACA,2BAAOU,UAAW,iBACd,+BAAQZ,IAEZ,4BAAQmB,QA9CM,WAClB,IAAIC,EAAsBjF,EAASoD,GACnC6B,EAAoBrE,KAAKZ,EAASf,IAClCoE,EAAmB4B,GACnB,IAAIC,EAAgBlF,EAASf,GAC7BkE,EA2MR,SAAuBxE,EAAWmB,GAE9B,IADA,IAAIC,EAAKC,EAASrB,GACT6B,EAAI,EAAGA,EAAIT,EAAGQ,OAAQC,IAC3B,IAAK,IAAIC,EAAI,EAAGA,EAAIV,EAAGS,GAAGb,OAAOY,OAAQE,IACrCV,EAAGS,GAAGb,OAAOc,GAAKX,EAAGC,EAAGS,GAAGb,OAAOc,IAG1C,OAAOV,EArIAoF,CA7EwBD,EA6EC,SAAC7F,GAE7B,OADAA,EAAO0B,OAAS1B,EAAOI,MAAQ,EACxBJ,OAtCH,QACA,4BAAQ2F,QAvCS,WACrB,IAAIC,EAAsBjF,EAASoD,GACnCD,EAAa8B,EAAoBG,OACjC/B,EAAmB4B,IAoCoBP,SAAUxF,EAAakE,IAA1D,YAAsFA,EAAgB7C,OAAtG,O,MC1EG8E,MARf,WACE,OACI,yBAAKZ,UAAW,OAChB,kBAAC,EAAD,QCKca,QACW,cAA7B3H,OAAO4H,SAASC,UAEe,UAA7B7H,OAAO4H,SAASC,UAEhB7H,OAAO4H,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.57736065.chunk.js","sourcesContent":["import React, {useMemo, useState} from 'react';\n\nfunction Suduko() {\n    const size = 3;\n    const neigborsMap = useMemo(() => getNeighborsMap(getIndicies(size)), [size]);\n    const [gameBoard, setGameBoard] = useState(() => getInitialGameBoard(size, neigborsMap));\n    const [savedGameboards, setSavedGameboards] = useState([]);\n\n    const handleInput = (square) => (evt) => {\n        let input = validateInput(evt);\n        if (input) {\n            let number = input !== \"*\" ? input : 0;\n            let nextGameBoard = deepCopy(gameBoard);\n            let prevNumber = getNumberOnGameboard(gameBoard, square);\n            if (number === 0) {\n                // This square has been reset, clear any failure flags\n                nextGameBoard = clearFailingSquareOnGameBoard(nextGameBoard, square)\n                // Re-evaluate neighbors that have same number (in case a faulty state has been resolved)\n                let gb = placeNumberOnGameBoard(number, nextGameBoard, square);\n                let neighborsWithNumber = getAllNeighborsWithNumber(neigborsMap, square, prevNumber, gb)\n                neighborsWithNumber.forEach((neighbor) => {\n                    if (validMove(gb, neighbor, prevNumber, neigborsMap)) {\n                        nextGameBoard = clearFailingSquareOnGameBoard(nextGameBoard, neighbor)\n                    } else {\n                        nextGameBoard = failingSquareOnGameBoard(nextGameBoard, neighbor)\n                    }\n                })\n            } else if (isValidNumber(square, number)) {\n                nextGameBoard = clearFailingSquareOnGameBoard(nextGameBoard, square);\n            } else {\n                nextGameBoard = failingSquareOnGameBoard(nextGameBoard, square);\n            }\n            nextGameBoard = placeNumberOnGameBoard(number, nextGameBoard, square);\n            nextGameBoard = updatePossibleNumbers(square, neigborsMap, nextGameBoard, number, prevNumber);\n\n            setGameBoard(nextGameBoard);\n\n        }\n    }\n    const saveGameboard = () => {\n        let nextSavedGameboards = deepCopy(savedGameboards);\n        nextSavedGameboards.push(deepCopy(gameBoard));\n        setSavedGameboards(nextSavedGameboards);\n        let nextGameboard = deepCopy(gameBoard);\n        setGameBoard(lockGameboard(nextGameboard));\n\n    };\n    const restoreGameboard = () => {\n        let nextSavedGameboards = deepCopy(savedGameboards);\n        setGameBoard(nextSavedGameboards.pop());\n        setSavedGameboards(nextSavedGameboards);\n    };\n    let boardUI = gameBoard.map(row => {\n        let cols = row.values.map(square => {\n            let tdClassnames = classNames({\n                \"verticalBorder\": square.x === 2 || square.x === 5,\n                \"horizontalBorder\" : square.y === 2 || square.y === 5,\n                \"failed\" : square.failing\n            });\n            let possibleNumbers = [];\n            for (let [key, value] of Object.entries(square.possible)) {\n                if (key !== \"0\" && value) {\n                    possibleNumbers.push(key);\n                }\n            }\n            let title = possibleNumbers.join(\", \");\n\n            return (\n                <td key={square.id} className={tdClassnames}>\n                    <input title={title} disabled={square.locked} key={square.id} type={\"text\"} onPaste={handleInput(square)} onKeyDown={handleInput(square)} defaultValue={square.value === 0 ? '' : square.value} size={1} maxLength={1}/>\n                </td>\n            )\n        });\n        return (\n            <tr key={row.id}>\n                {cols}\n            </tr>\n        )\n    })\n    return (\n        <>\n            <h1>Welcome to Suduko</h1>\n            <table className={\"App gameBoard\"}>\n                <tbody>{boardUI}</tbody>\n            </table>\n            <button onClick={saveGameboard}>Save</button>\n            <button onClick={restoreGameboard} disabled={isEmptyArray(savedGameboards)}>Restore ({savedGameboards.length})</button>\n        </>\n    );\n}\nconst validateInput = (evt) => {\n    var theEvent = evt || window.event;\n    var keyCode = theEvent.keyCode || theEvent.which;\n    let key = String.fromCharCode(keyCode);\n\n    var regex = /[1-9]/;\n    if (!regex.test(key)) {\n        theEvent.returnValue = false;\n        if (/[ -~]/.test(key) && theEvent.preventDefault) {\n            theEvent.preventDefault();\n        }\n        if (keyCode === 8 || keyCode === 32) {\n            return \"*\";\n        }\n        return;\n    } else {\n        return key;\n    }\n}\nfunction classNames(props) {\n    var result = '';\n    Object.keys(props).forEach((key) => {\n        if(props[key]){\n            result += key;\n            result += ' ';\n        }\n    })\n    return result;\n}\n\nfunction lockGameboard(gameboard) {\n    return mapEachSquare(gameboard, (square) => {\n        square.locked = square.value > 0;\n        return square;\n    });\n}\n\nfunction getNeighbors(neigborsMap, pos){\n    return [...neigborsMap[getKeyFromPos(pos)]];\n}\n\nfunction getAllNeighborsWithNumber(neigborsMap, pos, number, gameboard) {\n    return getNeighbors(neigborsMap,pos).filter((neighbor) => {\n        return !isSamePos(pos, neighbor) && number === getNumberOnGameboard(gameboard, neighbor);\n    });\n}\n\nfunction updatePossibleNumbers(currentPos, neigborsMap, gameboard, number, prevNumber) {\n    let poss = [currentPos,...getNeighbors(neigborsMap, currentPos)];\n    let mapGameboardSquare1 = mapGameboardSquare(gameboard, poss, (s) => {\n        s.possible[number] = !isSamePos(currentPos, s) && validMove(gameboard, s, number, neigborsMap);\n        s.possible[prevNumber] = validMove(gameboard, s, prevNumber, neigborsMap);\n    });\n    return mapGameboardSquare1;\n}\nconst validMove = (gameBoard, pos, number, neigborsMap) => {\n    let newVar = number === 0 || isEmptyArray(getAllNeighborsWithNumber(neigborsMap, pos, number, gameBoard));\n    return newVar;\n}\n\nfunction failingSquareOnGameBoard(gameBoard, pos) {\n    return mapGameboardSquare(gameBoard, pos, (square) => {square.failing = true;})\n}\nfunction clearFailingSquareOnGameBoard(gameBoard, pos) {\n    return mapGameboardSquare(gameBoard, pos, (square) => {square.failing = false;})\n}\nfunction placeNumberOnGameBoard(number, gameBoard, pos) {\n    return mapGameboardSquare(gameBoard, pos, (square) => {square.value = number;})\n}\nfunction getNumberOnGameboard(gameBoard, pos) {\n    return gameBoard[pos.y].values[pos.x].value;\n}\nfunction getInitialGameBoard(size, neighborsMap) {\n    let height = size*size;\n    let width = size*size;\n    var result = [];\n    for (var i = 0 ; i < height; i++) {\n        result[i] = {id:i, values:[]};\n        for (var j = 0; j < width; j++) {\n            result[i].values[j] = buildSquare(i, j, 0);\n        }\n    }\n    return result;\n}\n\nfunction getIndicies(size){\n    let numberOfRows = size*size;\n    let numberOfCols = size*size;\n    let allInidicies = [];\n\n    // Add all rows\n    for(let row = 0; row < numberOfRows; row++){\n        let rowIndicies = [];\n        for(let col = 0; col < numberOfCols; col++){\n            rowIndicies.push(buildPos(row, col));\n        }\n        allInidicies.push(rowIndicies);\n    }\n    // Add all columns\n    for(let col = 0; col < numberOfCols ; col++){\n        let rowIndicies = [];\n        for(let row = 0; row < numberOfRows; row++){\n            rowIndicies.push(buildPos(row, col));\n        }\n        allInidicies.push(rowIndicies);\n    }\n\n    /*\n     *  0  1  |  4  5\n     *  2  3  |  6  7\n     * -------+-------\n     *  8  9  | 12 13\n     * 10 11  | 14 15\n     *\n     *  0 -> 0:0 1 -> 0:1   2 -> 1:0   3 -> 1:1\n     *  4 -> 0:2 5 -> 0:3   6 -> 1:2   7 -> 1:3\n     *  8 -> 2:0 9 -> 2:1  10 -> 3:0  11 -> 3:1\n     * 12 -> 2:2 13 -> 2:3 14 -> 3:2  15 -> 3:3\n     *\n     */\n    const quadrantSize = size;\n    const numOfQuadrants = size;\n    let quadrantRows = numOfQuadrants;\n    let quadrantCols = numOfQuadrants;\n    let rowsInQuadrant = quadrantSize;\n    let colsInQuadrant = quadrantSize;\n\n    for (let quadrantRow = 0; quadrantRow < quadrantRows; quadrantRow++) {\n        for (let quadrantCol = 0; quadrantCol < quadrantCols; quadrantCol++) {\n            let quadrantIndicies = [];\n            for (let row = 0; row < rowsInQuadrant; row++) {\n                for (let col = 0; col < colsInQuadrant; col++) {\n                    let x = (quadrantCol*quadrantSize) + col;\n                    let y = (quadrantRow*quadrantSize) + row;\n                    quadrantIndicies.push(buildPos(y, x));\n                }\n            }\n            allInidicies.push(quadrantIndicies);\n        }\n    }\n\n    return allInidicies;\n}\nfunction getNeighborsMap(indicies){\n    let neighborsMap = {};\n    for(let i = 0; i < indicies.length; i++){\n        for(let j = 0; j < indicies[i].length; j++){\n            let key = getKeyFromPos(indicies[i][j]);\n            if (neighborsMap[key] === undefined) {\n                neighborsMap[key] = []\n            }\n            neighborsMap[key] = getUniquePoss([...neighborsMap[key], ...indicies[i]]);\n        }\n    }\n    return neighborsMap;\n}\n\nfunction mapEachSquare(gameboard, fn){\n    let gb = deepCopy(gameboard);\n    for (let i = 0; i < gb.length; i++) {\n        for (let j = 0; j < gb[i].values.length; j++) {\n            gb[i].values[j] = fn(gb[i].values[j]);\n        }\n    }\n    return gb;\n}\n\nfunction mapGameboardSquare(gameboard, poss, fn){\n    let gb = deepCopy(gameboard);\n    let ps = Array.isArray(poss) ? poss : [poss];\n    ps.forEach((pos) => {\n        let result = fn(gb[pos.y].values[pos.x]);\n        if( typeof result !== 'undefined'){\n            gb[pos.y].values[pos.x] = result;\n        }\n\n    })\n    return gb;\n}\n\nfunction getUniquePoss(a) {\n    if(a.length === 0){\n        return [];\n    }\n    var b = [a[0]], i, j, tmp;\n    for (i = 1; i < a.length; i++) {\n        tmp = 1;\n        for (j = 0; j < b.length; j++) {\n            if (isSamePos(a[i], b[j])) {\n                tmp = 0;\n                break;\n            }\n        }\n        if (tmp) {\n            b.push(a[i]);\n        }\n    }\n    return b;\n}\n\nconst buildSquare = (y, x, value) => {\n    let square = {\n        id: y + \":\" + x,\n        y: y,\n        x: x,\n        value: value,\n        failing: false,\n        locked: false,\n        possible: {\"0\": true, \"1\": true, \"2\": true, \"3\": true, \"4\": true, \"5\": true, \"6\": true, \"7\": true, \"8\": true, \"9\": true}\n    };\n    square.possible[value] = false;\n    return square;\n}\nconst isValidNumber = (square, number) => {return square.possible[number];}\n\nconst buildPos = (y,x) => {return {y:y, x:x}};\nconst isSamePos = (s1, s2) => {return s1.x === s2.x && s1.y === s2.y;}\nconst getKeyFromPos = (pos) => {return pos.x + \":\" + pos.y;}\n\nconst isEmptyArray = (array) => {return !array || !array.length;}\nfunction deepCopy(gameBoard) {return JSON.parse(JSON.stringify(gameBoard));}\n\n\nexport default Suduko;\n","import React from 'react';\nimport {Suduko} from './suduko'\nimport './App.css';\n\nfunction App() {\n  return (\n      <div className={'App'}>\n      <Suduko/>\n      </div>\n      );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}